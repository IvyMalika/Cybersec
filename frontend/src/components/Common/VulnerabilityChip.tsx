import React from 'react';
import { Chip, Tooltip } from '@mui/material';
import {
  ErrorOutline as CriticalIcon,
  Warning as WarningIcon,
  Info as InfoIcon,
  CheckCircle as CheckIcon,
} from '@mui/icons-material';
import { colors } from '../../theme/theme';

interface VulnerabilityChipProps {
  severity: 'critical' | 'high' | 'medium' | 'low' | 'info';
  count?: number;
  showIcon?: boolean;
  size?: 'small' | 'medium';
  variant?: 'filled' | 'outlined';
}

const VulnerabilityChip: React.FC<VulnerabilityChipProps> = ({
  severity,
  count,
  showIcon = true,
  size = 'small',
  variant = 'filled',
}) => {
  const getSeverityConfig = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical':
        return {
          color: colors.severity.critical,
          icon: <CriticalIcon />,
          label: 'Critical',
        };
      case 'high':
        return {
          color: colors.severity.high,
          icon: <WarningIcon />,
          label: 'High',
        };
      case 'medium':
        return {
          color: colors.severity.medium,
          icon: <InfoIcon />,
          label: 'Medium',
        };
      case 'low':
        return {
          color: colors.severity.low,
          icon: <CheckIcon />,
          label: 'Low',
        };
      case 'info':
        return {
          color: colors.severity.info,
          icon: <InfoIcon />,
          label: 'Info',
        };
      default:
        return {
          color: colors.text.secondary,
          icon: <InfoIcon />,
          label: 'Unknown',
        };
    }
  };

  const config = getSeverityConfig(severity);
  const displayLabel = count !== undefined ? `${config.label} (${count})` : config.label;

  const chipSx = {
    backgroundColor: variant === 'filled' ? config.color + '30' : 'transparent',
    color: config.color,
    border: variant === 'outlined' ? `1px solid ${config.color}` : 'none',
    fontWeight: 600,
    '& .MuiChip-icon': {
      color: config.color,
    },
  };

  return (
    <Tooltip title={`${config.label} severity vulnerability`}>
      <Chip
        label={displayLabel}
        icon={showIcon ? config.icon : undefined}
        size={size}
        variant={variant}
        sx={chipSx}
      />
    </Tooltip>
  );
};

export default VulnerabilityChip;