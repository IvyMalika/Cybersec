import React, { useState } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  TextField,
  Button,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Alert,
  Chip,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  IconButton,
  Tooltip,
  Grid,
  Divider,
  CircularProgress,
  Fade,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
} from '@mui/material';
import {
  PlayArrow as PlayIcon,
  GetApp as DownloadIcon,
  Visibility as ViewIcon,
  BugReport as BugReportIcon,
  Security as SecurityIcon,
  Web as WebIcon,
  NetworkCheck as NetworkIcon,
  ExpandMore as ExpandMoreIcon,
  ErrorOutline as ErrorIcon,
  Warning as WarningIcon,
  Info as InfoIcon,
} from '@mui/icons-material';
import { useForm, Controller } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';
import { useMutation, useQuery } from '@tanstack/react-query';
import { apiClient } from '../../utils/api';
import { colors } from '../../theme/theme';
import { VulnerabilityRequest, VulnerabilityResponse } from '../../types/api';
import TerminalOutput from '../Common/TerminalOutput';
import ScanProgress from '../Common/ScanProgress';
import VulnerabilityChip from '../Common/VulnerabilityChip';

const vulnerabilitySchema = yup.object({
  target: yup
    .string()
    .required('Target is required')
    .matches(
      /^(https?:\/\/)?([a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}|^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,
      'Please enter a valid URL, domain, or IP address'
    ),
  scan_type: yup.string().required('Scan type is required'),
});

interface VulnerabilityFormData {
  target: string;
  scan_type: 'full' | 'web' | 'network';
}

const scanTypes = [
  {
    value: 'full',
    label: 'Full Scan',
    description: 'Comprehensive vulnerability assessment',
    icon: <SecurityIcon />,
    color: colors.severity.high,
  },
  {
    value: 'web',
    label: 'Web Application',
    description: 'OWASP Top 10 and web-specific vulnerabilities',
    icon: <WebIcon />,
    color: colors.primary.main,
  },
  {
    value: 'network',
    label: 'Network Services',
    description: 'Network protocol and service vulnerabilities',
    icon: <NetworkIcon />,
    color: colors.severity.medium,
  },
];

const VulnerabilityScanner: React.FC = () => {
  const [scanResults, setScanResults] = useState<VulnerabilityResponse | null>(null);
  const [currentJobId, setCurrentJobId] = useState<number | null>(null);
  const [showResults, setShowResults] = useState(false);
  const [selectedVulnerability, setSelectedVulnerability] = useState<any>(null);

  const {
    control,
    handleSubmit,
    formState: { errors },
    watch,
  } = useForm<VulnerabilityFormData>({
    resolver: yupResolver(vulnerabilitySchema),
    defaultValues: {
      target: '',
      scan_type: 'full',
    },
  });

  const selectedScanType = watch('scan_type');

  const vulnerabilityMutation = useMutation({
    mutationFn: (data: VulnerabilityRequest) => apiClient.runVulnerabilityScan(data),
    onSuccess: (data: VulnerabilityResponse) => {
      setScanResults(data);
      setCurrentJobId(data.job_id);
      setShowResults(true);
    },
    onError: (error) => {
      console.error('Vulnerability scan failed:', error);
    },
  });

  const {
    data: jobDetails,
    isLoading: jobLoading,
    error: jobError,
  } = useQuery({
    queryKey: ['job', currentJobId],
    queryFn: () => apiClient.getJob(currentJobId!),
    enabled: !!currentJobId,
    refetchInterval: 2000,
  });

  const onSubmit = (data: VulnerabilityFormData) => {
    vulnerabilityMutation.mutate(data);
  };

  const handleDownloadReport = async () => {
    if (!currentJobId) return;
    
    try {
      const reportData = await apiClient.getJobReport(currentJobId);
      const blob = new Blob([reportData], { type: 'application/pdf' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `vulnerability_report_${currentJobId}.pdf`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Failed to download report:', error);
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity?.toLowerCase()) {
      case 'critical':
        return <ErrorIcon sx={{ color: colors.severity.critical }} />;
      case 'high':
        return <WarningIcon sx={{ color: colors.severity.high }} />;
      case 'medium':
        return <InfoIcon sx={{ color: colors.severity.medium }} />;
      case 'low':
        return <InfoIcon sx={{ color: colors.severity.low }} />;
      default:
        return <InfoIcon sx={{ color: colors.severity.info }} />;
    }
  };

  const getVulnerabilityStats = () => {
    if (!scanResults) return null;

    const stats = {
      critical: 0,
      high: 0,
      medium: 0,
      low: 0,
    };

    scanResults.vulnerabilities.forEach(vuln => {
      const severity = vuln.severity.toLowerCase();
      if (severity in stats) {
        stats[severity as keyof typeof stats]++;
      }
    });

    return stats;
  };

  const vulnerabilityStats = getVulnerabilityStats();

  return (
    <Box sx={{ maxWidth: 1200, mx: 'auto' }}>
      <Typography variant="h4" sx={{ mb: 3, fontWeight: 600 }}>
        Vulnerability Scanner
      </Typography>

      <Grid container spacing={3}>
        <Grid item xs={12} md={4}>
          <Card>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                Scan Configuration
              </Typography>

              <form onSubmit={handleSubmit(onSubmit)}>
                <Controller
                  name="target"
                  control={control}
                  render={({ field }) => (
                    <TextField
                      {...field}
                      fullWidth
                      label="Target"
                      placeholder="https://example.com or 192.168.1.1"
                      error={!!errors.target}
                      helperText={errors.target?.message}
                      sx={{ mb: 2 }}
                    />
                  )}
                />

                <Controller
                  name="scan_type"
                  control={control}
                  render={({ field }) => (
                    <FormControl fullWidth sx={{ mb: 3 }}>
                      <InputLabel>Scan Type</InputLabel>
                      <Select {...field} label="Scan Type">
                        {scanTypes.map((type) => (
                          <MenuItem key={type.value} value={type.value}>
                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                              {type.icon}
                              <Box>
                                <Typography variant="body1">{type.label}</Typography>
                                <Typography variant="caption" color="text.secondary">
                                  {type.description}
                                </Typography>
                              </Box>
                            </Box>
                          </MenuItem>
                        ))}
                      </Select>
                    </FormControl>
                  )}
                />

                <Button
                  type="submit"
                  fullWidth
                  variant="contained"
                  disabled={vulnerabilityMutation.isPending}
                  startIcon={vulnerabilityMutation.isPending ? <CircularProgress size={20} /> : <PlayIcon />}
                  sx={{
                    backgroundColor: colors.primary.main,
                    '&:hover': {
                      backgroundColor: colors.primary.dark,
                    },
                  }}
                >
                  {vulnerabilityMutation.isPending ? 'Scanning...' : 'Start Vulnerability Scan'}
                </Button>
              </form>

              {vulnerabilityMutation.error && (
                <Alert
                  severity="error"
                  sx={{
                    mt: 2,
                    backgroundColor: colors.severity.critical + '20',
                    color: colors.severity.critical,
                    border: `1px solid ${colors.severity.critical}40`,
                  }}
                >
                  {typeof vulnerabilityMutation.error === 'string'
                    ? vulnerabilityMutation.error
                    : vulnerabilityMutation.error?.message
                      ? vulnerabilityMutation.error.message
                      : vulnerabilityMutation.error?.error
                        ? vulnerabilityMutation.error.error
                        : JSON.stringify(vulnerabilityMutation.error)}
                </Alert>
              )}
            </CardContent>
          </Card>

          {/* Scan Type Details */}
          <Card sx={{ mt: 2 }}>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                Scan Details
              </Typography>
              {scanTypes.map((type) => (
                <Box
                  key={type.value}
                  sx={{
                    p: 2,
                    mb: 1,
                    borderRadius: 1,
                    backgroundColor: selectedScanType === type.value ? 
                      type.color + '20' : 'transparent',
                    border: `1px solid ${selectedScanType === type.value ? 
                      type.color : colors.border.primary}`,
                    transition: 'all 0.2s ease-in-out',
                  }}
                >
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
                    {type.icon}
                    <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
                      {type.label}
                    </Typography>
                  </Box>
                  <Typography variant="body2" color="text.secondary">
                    {type.description}
                  </Typography>
                </Box>
              ))}
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} md={8}>
          {vulnerabilityMutation.isPending && (
            <Card sx={{ mb: 2 }}>
              <CardContent>
                <ScanProgress 
                  jobId={currentJobId} 
                  isActive={vulnerabilityMutation.isPending}
                  onComplete={() => {
                    vulnerabilityMutation.reset();
                  }}
                />
              </CardContent>
            </Card>
          )}

          {showResults && scanResults && (
            <Fade in={showResults}>
              <Card>
                <CardContent>
                  <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
                    <Typography variant="h6" sx={{ fontWeight: 600 }}>
                      Vulnerability Assessment Results
                    </Typography>
                    <Box sx={{ display: 'flex', gap: 1 }}>
                      <Tooltip title="Download Report">
                        <IconButton onClick={handleDownloadReport}>
                          <DownloadIcon />
                        </IconButton>
                      </Tooltip>
                    </Box>
                  </Box>

                  {vulnerabilityStats && (
                    <Box sx={{ display: 'flex', gap: 1, mb: 2, flexWrap: 'wrap' }}>
                      <VulnerabilityChip severity="critical" count={vulnerabilityStats.critical} />
                      <VulnerabilityChip severity="high" count={vulnerabilityStats.high} />
                      <VulnerabilityChip severity="medium" count={vulnerabilityStats.medium} />
                      <VulnerabilityChip severity="low" count={vulnerabilityStats.low} />
                    </Box>
                  )}

                  <Alert
                    severity={scanResults.vulnerabilities_found > 0 ? 'warning' : 'success'}
                    sx={{
                      mb: 2,
                      backgroundColor: scanResults.vulnerabilities_found > 0 ? 
                        colors.severity.high + '20' : colors.severity.low + '20',
                      color: scanResults.vulnerabilities_found > 0 ? 
                        colors.severity.high : colors.severity.low,
                      border: `1px solid ${scanResults.vulnerabilities_found > 0 ? 
                        colors.severity.high : colors.severity.low}40`,
                    }}
                  >
                    Scan completed! Found {scanResults.vulnerabilities_found} vulnerabilities.
                  </Alert>

                  <Divider sx={{ mb: 2 }} />

                  <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                    Vulnerability Details
                  </Typography>

                  {scanResults.vulnerabilities.length > 0 ? (
                    <Box>
                      {scanResults.vulnerabilities.map((vuln, index) => (
                        <Accordion key={index} sx={{ mb: 1 }}>
                          <AccordionSummary
                            expandIcon={<ExpandMoreIcon />}
                            sx={{
                              backgroundColor: colors.background.elevated,
                              '&:hover': {
                                backgroundColor: colors.background.elevated + 'CC',
                              },
                            }}
                          >
                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, width: '100%' }}>
                              {getSeverityIcon(vuln.severity)}
                              <Box sx={{ flex: 1 }}>
                                <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
                                  {vuln.type}
                                </Typography>
                                <Typography variant="body2" color="text.secondary">
                                  Severity: {vuln.severity}
                                </Typography>
                              </Box>
                              <VulnerabilityChip severity={vuln.severity as any} />
                            </Box>
                          </AccordionSummary>
                          <AccordionDetails>
                            <Box sx={{ pl: 2 }}>
                              <Typography variant="body2" sx={{ mb: 2 }}>
                                {vuln.type} vulnerability detected in the target application.
                              </Typography>
                              
                              {vuln.proofs && (
                                <Box sx={{ mb: 2 }}>
                                  <Typography variant="subtitle2" sx={{ mb: 1, fontWeight: 600 }}>
                                    Proof of Concept:
                                  </Typography>
                                  <List dense>
                                    {vuln.proofs.map((proof, proofIndex) => (
                                      <ListItem key={proofIndex} sx={{ pl: 0 }}>
                                        <ListItemIcon>
                                          <BugReportIcon fontSize="small" />
                                        </ListItemIcon>
                                        <ListItemText
                                          primary={proof}
                                          primaryTypographyProps={{
                                            variant: 'body2',
                                            fontFamily: 'monospace',
                                            backgroundColor: colors.background.elevated,
                                            p: 1,
                                            borderRadius: 1,
                                          }}
                                        />
                                      </ListItem>
                                    ))}
                                  </List>
                                </Box>
                              )}

                              {vuln.proof && (
                                <Box sx={{ mb: 2 }}>
                                  <Typography variant="subtitle2" sx={{ mb: 1, fontWeight: 600 }}>
                                    Evidence:
                                  </Typography>
                                  <Box
                                    sx={{
                                      backgroundColor: colors.background.elevated,
                                      p: 2,
                                      borderRadius: 1,
                                      fontFamily: 'monospace',
                                      fontSize: '0.875rem',
                                      whiteSpace: 'pre-wrap',
                                    }}
                                  >
                                    {vuln.proof}
                                  </Box>
                                </Box>
                              )}
                            </Box>
                          </AccordionDetails>
                        </Accordion>
                      ))}
                    </Box>
                  ) : (
                    <Alert severity="success">
                      No vulnerabilities found in the target. The application appears to be secure.
                    </Alert>
                  )}
                </CardContent>
              </Card>
            </Fade>
          )}

          {jobDetails && (
            <Card sx={{ mt: 2 }}>
              <CardContent>
                <TerminalOutput
                  jobId={currentJobId}
                  results={jobDetails.results}
                  title="Vulnerability Scan Output"
                />
              </CardContent>
            </Card>
          )}
        </Grid>
      </Grid>
    </Box>
  );
};

export default VulnerabilityScanner;