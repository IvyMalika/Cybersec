import React, { useState, useCallback } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  Alert,
  LinearProgress,
  Chip,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  IconButton,
  Tooltip,
  Grid,
  Divider,
  CircularProgress,
  Fade,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Tabs,
  Tab,
  TabPanel,
} from '@mui/material';
import {
  CloudUpload as UploadIcon,
  GetApp as DownloadIcon,
  Visibility as ViewIcon,
  BugReport as BugReportIcon,
  Security as SecurityIcon,
  Memory as MemoryIcon,
  ExpandMore as ExpandMoreIcon,
  Warning as WarningIcon,
  Info as InfoIcon,
  Code as CodeIcon,
  Storage as StorageIcon,
} from '@mui/icons-material';
import { useDropzone } from 'react-dropzone';
import { useMutation, useQuery } from '@tanstack/react-query';
import { apiClient } from '../../utils/api';
import { colors } from '../../theme/theme';
import TerminalOutput from '../Common/TerminalOutput';
import ScanProgress from '../Common/ScanProgress';

interface MalwareAnalysisResult {
  job_id: number;
  analysis: {
    file_info: {
      size: number;
      type: string;
      md5: string;
      sha1: string;
      sha256: string;
      ssdeep: string;
    };
    strings: string[];
    pe_analysis: {
      entry_point: number;
      sections: Array<{
        name: string;
        virtual_address: string;
        virtual_size: string;
        raw_size: string;
        characteristics: string;
      }>;
      imports: Array<{
        dll: string;
        functions: string[];
      }>;
      exports: string[];
      suspicious: string[];
    };
    indicators: string[];
  };
}

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function CustomTabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`malware-tabpanel-${index}`}
      aria-labelledby={`malware-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
    </div>
  );
}

const MalwareAnalyzer: React.FC = () => {
  const [analysisResults, setAnalysisResults] = useState<MalwareAnalysisResult | null>(null);
  const [currentJobId, setCurrentJobId] = useState<number | null>(null);
  const [showResults, setShowResults] = useState(false);
  const [tabValue, setTabValue] = useState(0);

  const malwareMutation = useMutation({
    mutationFn: (file: File) => apiClient.analyzeMalware(file),
    onSuccess: (data: MalwareAnalysisResult) => {
      setAnalysisResults(data);
      setCurrentJobId(data.job_id);
      setShowResults(true);
    },
    onError: (error) => {
      console.error('Malware analysis failed:', error);
    },
  });

  const {
    data: jobDetails,
    isLoading: jobLoading,
    error: jobError,
  } = useQuery({
    queryKey: ['job', currentJobId],
    queryFn: () => apiClient.getJob(currentJobId!),
    enabled: !!currentJobId,
    refetchInterval: 2000,
  });

  const onDrop = useCallback((acceptedFiles: File[]) => {
    if (acceptedFiles.length > 0) {
      malwareMutation.mutate(acceptedFiles[0]);
    }
  }, [malwareMutation]);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'application/octet-stream': ['.exe', '.dll', '.bin'],
      'application/x-executable': ['.exe'],
      'application/x-msdownload': ['.exe', '.dll'],
    },
    maxFiles: 1,
    maxSize: 16 * 1024 * 1024, // 16MB
  });

  const handleDownloadReport = async () => {
    if (!currentJobId) return;
    
    try {
      const reportData = await apiClient.getJobReport(currentJobId);
      const blob = new Blob([reportData], { type: 'application/pdf' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `malware_analysis_${currentJobId}.pdf`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Failed to download report:', error);
    }
  };

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  const formatFileSize = (bytes: number) => {
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    if (bytes === 0) return '0 Bytes';
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
  };

  const getSeverityColor = (severity: string) => {
    switch (severity?.toLowerCase()) {
      case 'critical':
        return colors.severity.critical;
      case 'high':
        return colors.severity.high;
      case 'medium':
        return colors.severity.medium;
      case 'low':
        return colors.severity.low;
      default:
        return colors.severity.info;
    }
  };

  return (
    <Box sx={{ maxWidth: 1200, mx: 'auto' }}>
      <Typography variant="h4" sx={{ mb: 3, fontWeight: 600 }}>
        Malware Analyzer
      </Typography>

      <Grid container spacing={3}>
        <Grid item xs={12} md={4}>
          <Card>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                Upload Sample
              </Typography>

              <Box
                {...getRootProps()}
                sx={{
                  border: `2px dashed ${isDragActive ? colors.primary.main : colors.border.primary}`,
                  borderRadius: 2,
                  p: 4,
                  textAlign: 'center',
                  cursor: 'pointer',
                  backgroundColor: isDragActive ? colors.primary.main + '10' : 'transparent',
                  transition: 'all 0.2s ease-in-out',
                  '&:hover': {
                    borderColor: colors.primary.main,
                    backgroundColor: colors.primary.main + '05',
                  },
                }}
              >
                <input {...getInputProps()} />
                <MemoryIcon sx={{ fontSize: 48, color: colors.primary.main, mb: 2 }} />
                <Typography variant="h6" sx={{ mb: 1 }}>
                  {isDragActive ? 'Drop the file here' : 'Drag & drop a file here'}
                </Typography>
                <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                  or click to select a file
                </Typography>
                <Typography variant="caption" color="text.secondary">
                  Supported formats: .exe, .dll, .bin (Max 16MB)
                </Typography>
              </Box>

              {malwareMutation.error && (
                <Alert
                  severity="error"
                  sx={{
                    mt: 2,
                    backgroundColor: colors.severity.critical + '20',
                    color: colors.severity.critical,
                    border: `1px solid ${colors.severity.critical}40`,
                  }}
                >
                  {malwareMutation.error.message}
                </Alert>
              )}
            </CardContent>
          </Card>

          <Card sx={{ mt: 2 }}>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                Analysis Features
              </Typography>
              <List dense>
                <ListItem>
                  <ListItemIcon>
                    <SecurityIcon sx={{ color: colors.primary.main }} />
                  </ListItemIcon>
                  <ListItemText
                    primary="Static Analysis"
                    secondary="File structure and metadata analysis"
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon>
                    <CodeIcon sx={{ color: colors.primary.main }} />
                  </ListItemIcon>
                  <ListItemText
                    primary="String Extraction"
                    secondary="Extract readable strings from binary"
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon>
                    <StorageIcon sx={{ color: colors.primary.main }} />
                  </ListItemIcon>
                  <ListItemText
                    primary="PE Analysis"
                    secondary="Portable Executable format analysis"
                  />
                </ListItem>
                <ListItem>
                  <ListItemIcon>
                    <BugReportIcon sx={{ color: colors.primary.main }} />
                  </ListItemIcon>
                  <ListItemText
                    primary="IOC Detection"
                    secondary="Identify indicators of compromise"
                  />
                </ListItem>
              </List>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} md={8}>
          {malwareMutation.isPending && (
            <Card sx={{ mb: 2 }}>
              <CardContent>
                <ScanProgress 
                  jobId={currentJobId} 
                  isActive={malwareMutation.isPending}
                  onComplete={() => {
                    malwareMutation.reset();
                  }}
                />
              </CardContent>
            </Card>
          )}

          {showResults && analysisResults && (
            <Fade in={showResults}>
              <Card>
                <CardContent>
                  <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
                    <Typography variant="h6" sx={{ fontWeight: 600 }}>
                      Malware Analysis Results
                    </Typography>
                    <Box sx={{ display: 'flex', gap: 1 }}>
                      <Tooltip title="Download Report">
                        <IconButton onClick={handleDownloadReport}>
                          <DownloadIcon />
                        </IconButton>
                      </Tooltip>
                    </Box>
                  </Box>

                  <Alert
                    severity={analysisResults.analysis.indicators.length > 0 ? 'error' : 'success'}
                    sx={{
                      mb: 2,
                      backgroundColor: analysisResults.analysis.indicators.length > 0 ? 
                        colors.severity.critical + '20' : colors.severity.low + '20',
                      color: analysisResults.analysis.indicators.length > 0 ? 
                        colors.severity.critical : colors.severity.low,
                      border: `1px solid ${analysisResults.analysis.indicators.length > 0 ? 
                        colors.severity.critical : colors.severity.low}40`,
                    }}
                  >
                    Analysis completed! {analysisResults.analysis.indicators.length > 0 ? 
                      `Found ${analysisResults.analysis.indicators.length} suspicious indicators.` :
                      'No suspicious indicators detected.'}
                  </Alert>

                  <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>
                    <Tabs value={tabValue} onChange={handleTabChange}>
                      <Tab label="File Info" />
                      <Tab label="PE Analysis" />
                      <Tab label="Strings" />
                      <Tab label="Indicators" />
                    </Tabs>
                  </Box>

                  <CustomTabPanel value={tabValue} index={0}>
                    <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                      File Information
                    </Typography>
                    <TableContainer component={Paper} sx={{ backgroundColor: colors.background.paper }}>
                      <Table>
                        <TableBody>
                          <TableRow>
                            <TableCell sx={{ fontWeight: 600 }}>File Size</TableCell>
                            <TableCell>{formatFileSize(analysisResults.analysis.file_info.size)}</TableCell>
                          </TableRow>
                          <TableRow>
                            <TableCell sx={{ fontWeight: 600 }}>File Type</TableCell>
                            <TableCell>{analysisResults.analysis.file_info.type}</TableCell>
                          </TableRow>
                          <TableRow>
                            <TableCell sx={{ fontWeight: 600 }}>MD5</TableCell>
                            <TableCell sx={{ fontFamily: 'monospace' }}>
                              {analysisResults.analysis.file_info.md5}
                            </TableCell>
                          </TableRow>
                          <TableRow>
                            <TableCell sx={{ fontWeight: 600 }}>SHA1</TableCell>
                            <TableCell sx={{ fontFamily: 'monospace' }}>
                              {analysisResults.analysis.file_info.sha1}
                            </TableCell>
                          </TableRow>
                          <TableRow>
                            <TableCell sx={{ fontWeight: 600 }}>SHA256</TableCell>
                            <TableCell sx={{ fontFamily: 'monospace' }}>
                              {analysisResults.analysis.file_info.sha256}
                            </TableCell>
                          </TableRow>
                        </TableBody>
                      </Table>
                    </TableContainer>
                  </CustomTabPanel>

                  <CustomTabPanel value={tabValue} index={1}>
                    <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                      PE Analysis
                    </Typography>
                    
                    {analysisResults.analysis.pe_analysis.suspicious.length > 0 && (
                      <Alert severity="warning" sx={{ mb: 2 }}>
                        <Typography variant="subtitle2" sx={{ fontWeight: 600 }}>
                          Suspicious Characteristics:
                        </Typography>
                        <List dense>
                          {analysisResults.analysis.pe_analysis.suspicious.map((item, index) => (
                            <ListItem key={index} sx={{ pl: 0 }}>
                              <ListItemIcon>
                                <WarningIcon fontSize="small" />
                              </ListItemIcon>
                              <ListItemText primary={item} />
                            </ListItem>
                          ))}
                        </List>
                      </Alert>
                    )}

                    <Accordion>
                      <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                        <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
                          Sections ({analysisResults.analysis.pe_analysis.sections.length})
                        </Typography>
                      </AccordionSummary>
                      <AccordionDetails>
                        <TableContainer component={Paper}>
                          <Table size="small">
                            <TableHead>
                              <TableRow>
                                <TableCell>Name</TableCell>
                                <TableCell>Virtual Address</TableCell>
                                <TableCell>Virtual Size</TableCell>
                                <TableCell>Raw Size</TableCell>
                                <TableCell>Characteristics</TableCell>
                              </TableRow>
                            </TableHead>
                            <TableBody>
                              {analysisResults.analysis.pe_analysis.sections.map((section, index) => (
                                <TableRow key={index}>
                                  <TableCell sx={{ fontFamily: 'monospace' }}>
                                    {section.name}
                                  </TableCell>
                                  <TableCell sx={{ fontFamily: 'monospace' }}>
                                    {section.virtual_address}
                                  </TableCell>
                                  <TableCell sx={{ fontFamily: 'monospace' }}>
                                    {section.virtual_size}
                                  </TableCell>
                                  <TableCell sx={{ fontFamily: 'monospace' }}>
                                    {section.raw_size}
                                  </TableCell>
                                  <TableCell sx={{ fontFamily: 'monospace' }}>
                                    {section.characteristics}
                                  </TableCell>
                                </TableRow>
                              ))}
                            </TableBody>
                          </Table>
                        </TableContainer>
                      </AccordionDetails>
                    </Accordion>

                    <Accordion sx={{ mt: 1 }}>
                      <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                        <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
                          Imports ({analysisResults.analysis.pe_analysis.imports.length})
                        </Typography>
                      </AccordionSummary>
                      <AccordionDetails>
                        {analysisResults.analysis.pe_analysis.imports.map((importItem, index) => (
                          <Accordion key={index}>
                            <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                              <Typography variant="body1" sx={{ fontFamily: 'monospace' }}>
                                {importItem.dll} ({importItem.functions.length} functions)
                              </Typography>
                            </AccordionSummary>
                            <AccordionDetails>
                              <Box sx={{ maxHeight: 200, overflow: 'auto' }}>
                                {importItem.functions.map((func, funcIndex) => (
                                  <Typography
                                    key={funcIndex}
                                    variant="body2"
                                    sx={{ fontFamily: 'monospace', mb: 0.5 }}
                                  >
                                    {func}
                                  </Typography>
                                ))}
                              </Box>
                            </AccordionDetails>
                          </Accordion>
                        ))}
                      </AccordionDetails>
                    </Accordion>
                  </CustomTabPanel>

                  <CustomTabPanel value={tabValue} index={2}>
                    <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                      Extracted Strings ({analysisResults.analysis.strings.length})
                    </Typography>
                    <Box
                      sx={{
                        maxHeight: 400,
                        overflow: 'auto',
                        backgroundColor: colors.background.elevated,
                        p: 2,
                        borderRadius: 1,
                        fontFamily: 'monospace',
                        fontSize: '0.875rem',
                      }}
                    >
                      {analysisResults.analysis.strings.slice(0, 500).map((str, index) => (
                        <Typography
                          key={index}
                          variant="body2"
                          sx={{
                            fontFamily: 'monospace',
                            mb: 0.5,
                            wordBreak: 'break-all',
                          }}
                        >
                          {str}
                        </Typography>
                      ))}
                      {analysisResults.analysis.strings.length > 500 && (
                        <Typography variant="body2" color="text.secondary" sx={{ mt: 2 }}>
                          ... and {analysisResults.analysis.strings.length - 500} more strings
                        </Typography>
                      )}
                    </Box>
                  </CustomTabPanel>

                  <CustomTabPanel value={tabValue} index={3}>
                    <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                      Suspicious Indicators ({analysisResults.analysis.indicators.length})
                    </Typography>
                    {analysisResults.analysis.indicators.length > 0 ? (
                      <List>
                        {analysisResults.analysis.indicators.map((indicator, index) => (
                          <ListItem key={index} sx={{ pl: 0 }}>
                            <ListItemIcon>
                              <WarningIcon sx={{ color: colors.severity.high }} />
                            </ListItemIcon>
                            <ListItemText
                              primary={indicator}
                              primaryTypographyProps={{
                                fontFamily: 'monospace',
                                fontSize: '0.875rem',
                              }}
                            />
                          </ListItem>
                        ))}
                      </List>
                    ) : (
                      <Alert severity="success">
                        No suspicious indicators found in the file.
                      </Alert>
                    )}
                  </CustomTabPanel>
                </CardContent>
              </Card>
            </Fade>
          )}

          {jobDetails && (
            <Card sx={{ mt: 2 }}>
              <CardContent>
                <TerminalOutput
                  jobId={currentJobId}
                  results={jobDetails.results}
                  title="Malware Analysis Output"
                />
              </CardContent>
            </Card>
          )}
        </Grid>
      </Grid>
    </Box>
  );
};

export default MalwareAnalyzer;